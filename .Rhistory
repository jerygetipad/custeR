practice$race_id <- r
all_races[[counter]] <- practice
counter <- counter + 1
#write_csv(x = pits,file = paste0("./files/pits/series_",series,"/",year,"/",r,".csv"))
}
},
error = function(e) {
message(paste0("Invalid Arguments"))
},
warning = function(w) {
},
finally = {
if(exists("no_data")) {
message(paste0("No practice time data found for races:", paste0(no_data,collapse=", ")))
}
}
)
return(all_races)
}
nas_practice(year=2021)
?try
raw_practice <- try(jsonlite::read_json(path = url),silent = T)
all_races <- list()
counter <- 1
no_data = c(); l=1;
for(r in races) {
url <- paste0("https://cf.nascar.com/cacher/",year,"/",series,"/",r,"/lap-averages.json")
raw_practice <- try(jsonlite::read_json(path = url),silent = T)
if(class(raw_practice)=="try-error") {
no_data[l] <- r; l = l+1
next
}
practice_type <- unlist(lapply(1:length(raw_practice),function(x) raw_practice[[x]]$Title))
practice <- data.frame()
for(i in 1:length(practice_type)) {
tmp <- raw_practice[[i]]$Items
tmp <- data.table::rbindlist(tmp)
tmp[tmp==999] <- NA
tmp$PracticeName <- practice_type[i]
practice <- rbind(practice,tmp)
}
practice$race_id <- r
all_races[[counter]] <- practice
counter <- counter + 1
#write_csv(x = pits,file = paste0("./files/pits/series_",series,"/",year,"/",r,".csv"))
}
#' @export
nas_practice <- function(year=2022,series=1) {
tryCatch(
expr={
tmp = paste0("./data/race_list/series_",series,"/race_list_",year,".csv")
race_list <- readr::read_csv(tmp)
races = race_list$race_id[race_list$race_type_id==1]
if (length(races)==0) {
stop("No lap time data found for the specified year")
}
all_races <- list()
counter <- 1
no_data = c(); l=1;
for(r in races) {
url <- paste0("https://cf.nascar.com/cacher/",year,"/",series,"/",r,"/lap-averages.json")
raw_practice <- try(jsonlite::read_json(path = url),silent = T)
if(class(raw_practice)=="try-error") {
no_data[l] <- r; l = l+1;
next;
}
practice_type <- unlist(lapply(1:length(raw_practice),function(x) raw_practice[[x]]$Title))
practice <- data.frame()
for(i in 1:length(practice_type)) {
tmp <- raw_practice[[i]]$Items
tmp <- data.table::rbindlist(tmp)
tmp[tmp==999] <- NA
tmp$PracticeName <- practice_type[i]
practice <- rbind(practice,tmp)
}
practice$race_id <- r
all_races[[counter]] <- practice
counter <- counter + 1
#write_csv(x = pits,file = paste0("./files/pits/series_",series,"/",year,"/",r,".csv"))
}
},
error = function(e) {
message(paste0("Invalid Arguments"))
},
warning = function(w) {
},
finally = {
if(exists("no_data")) {
message(paste0("No practice time data found for races:", paste0(no_data,collapse=", ")))
}
}
)
return(all_races)
}
nas_practice(year=2021)
tmp = paste0("https://cf.nascar.com/cacher/",year,"/",series,"/",r,"/lap-times.json")
tmp = "https://cf.nascar.com/cacher/drivers.json"
lap_times <- try(jsonlite::read_json(path = tmp))
lap_times <- try(jsonlite::read_json(path = url))
url = "https://cf.nascar.com/cacher/drivers.json"
lap_times <- try(jsonlite::read_json(path = url))
rm(tmp)
lap_times <- try(jsonlite::read_json(path = url))[[3]]
test <- lap_times[[1]]
View(test)
length(lap_times)
test <- lap_times[[2]]
View(test)
test <- lap_times[[3]]
View(test)
View(test)
test <- lap_times[[4]]
View(test)
test <- lap_times[[5]]
View(test)
test <- lap_times[[6]]
View(test)
badge = test$Badge_Image
badge
View(test)
image = test$Image_Transparent
image = test$Image_Small
image
test
View(test)
View(test)
View(lap_times)
driver_info <- try(jsonlite::read_json(path = url))[[3]]
test <- lapply(1:900,function(x) driver_info[[1]]$Nascar_Driver_ID)
test <- lapply(1:900,function(x) driver_info[[x]]$Nascar_Driver_ID)
test <- unlist(test)
speeds <- readr::read_csv("./data/practice/series_3/2020/4942.csv")
View(speeds)
driver_info[[1]]$Badge_Image
driver_info[[3]]$Badge_Image
driver_info[[5]]$Badge_Image
driver_info[[6]]$Badge_Image
?download.file
url = "https://cf.nascar.com/cacher/drivers.json"
driver_info <- try(jsonlite::read_json(path = url))[[3]]
# Initialize Directories
badge_dir = paste0("./data/images/badge")
if(!dir.exists(badge_dir)) {
dir.create(badge_dir,recursive = TRUE)
}
firesuit_dir = "./data/images/firesuit_small"
if(!dir.exists(firesuit_dir)) {
dir.create(firesuit_dir,recursive = TRUE)
}
image_dir = paste0("./data/images/image_small")
if(!dir.exists(image_dir)) {
dir.create(image_dir,recursive = TRUE)
}
# Populate Directories
for(d in 1:length(driver_info)) {
driver_id <- driver_info[[d]]$Nascar_Driver_ID
badge = driver_info[[d]]$Badge_Image
image_small = driver_info[[d]]$Image_Small
firesuit_small = driver_info[[d]]$Firesuit_Small
if(badge!="") {
download.file(badge,paste0(badge_dir,"/",driver_id,".png"), mode = 'wb')
}
if(image_small!="") {
download.file(image_small,paste0(image_dir,"/",driver_id,".png"), mode = 'wb')
}
if(firesuit_small!="") {
download.file(firesuit_small,paste0(firesuit_dir,"/",driver_id,".png"), mode = 'wb')
}
}
firesuit_small = driver_info[[d]]$Firesuit_Small
rm(lap_times)
test <- driver_info[[6]]
# Populate Directories
for(d in 1:length(driver_info)) {
driver_id <- driver_info[[d]]$Nascar_Driver_ID
badge = driver_info[[d]]$Badge_Image
image_small = driver_info[[d]]$Image_Small
firesuit_small = driver_info[[d]]$Firesuit_Image_Small
if(badge!="") {
download.file(badge,paste0(badge_dir,"/",driver_id,".png"), mode = 'wb')
}
if(image_small!="") {
download.file(image_small,paste0(image_dir,"/",driver_id,".png"), mode = 'wb')
}
if(firesuit_small!="") {
download.file(firesuit_small,paste0(firesuit_dir,"/",driver_id,".png"), mode = 'wb')
}
}
df_driver_info <- data.table::rbindlist(driver_info)
View(df_driver_info)
readr::write_csv(x=df_driver_info,"./data/misc/nas_driver_images.csv")
df_driver_info <-
data.table::rbindlist(driver_info) %>%
select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
)
library(magrittr)
df_driver_info <-
data.table::rbindlist(driver_info) |>
select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
)
df_driver_info <-
data.table::rbindlist(driver_info) |>
dplyr::select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
)
readr::write_csv(x=df_driver_info,"./data/misc/nas_driver_images.csv")
readr::write_csv(x=df_driver_info,"./data/misc/nas_driver_images.csv")
url = "https://cf.nascar.com/cacher/drivers.json"
new <- try(jsonlite::read_json(path = url))[[3]]
old <- readr::read_csv("./data/misc/nas_driver_images.csv")
new <- try(jsonlite::read_json(path = url))[[3]] %>%
data.table::rbindlist()
new <- try(jsonlite::read_json(path = url))[[3]] |>
data.table::rbindlist()
new <- try(jsonlite::read_json(path = url))[[3]] |>
data.table::rbindlist() |>
dplyr::select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
)
diff <- merge(x=old,y=new)
?merge
diff <- merge(x=old,y=new,by="Nascar_Driver_ID")
diff <- merge(x=old,y=new,sort=T,by="Nascar_Driver_ID")
View(diff)
diff <- merge(x=old,y=new,sort=T)
View(diff)
old %>% distinc()
old %>% dplyr::distinct()
new <- try(jsonlite::read_json(path = url))[[3]] |>
data.table::rbindlist() |>
dplyr::select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
) |>
dplyr::distinct()
old <- readr::read_csv("./data/misc/nas_driver_images.csv") |>
dplyr::distinct()
View(old)
identical(old,new)
diff <- merge(x=old,y=new,sort=T)
x=4392
oldrow = old[old$Nascar_Driver_ID==x,]
newrow = new[new$Nascar_Driver_ID==x,]
oldrow==newrow
identical(oldrow,newrow)
?identical
?all.equal(oldrow,newrow)
all.equal(oldrow,newrow)
View(old)
old <- readr::read_csv("./data/misc/nas_driver_images.csv",na = "") |>
dplyr::distinct()
?readr::read_csv
old <- readr::read_csv("./data/misc/nas_driver_images.csv",na = c("",NA)) |>
dplyr::distinct()
View(old)
?readr::write_csv
readr::write_csv(x=df_driver_info,"./data/misc/nas_driver_images.csv",na="")
old <- readr::read_csv("./data/misc/nas_driver_images.csv") |>
dplyr::distinct()
View(old)
readr::write_csv(x=df_driver_info,"./data/misc/nas_driver_images.csv")
old[is.na(old)]<-""
oldrow = old[old$Nascar_Driver_ID==x,]
newrow = new[new$Nascar_Driver_ID==x,]
all.equal(oldrow,newrow)
identical(oldrow,newrow)
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
identical(oldrow,newrow)
oldrow==newrow
test <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(identical(oldrow,newrow)) {return(x)}
})
View(test)
test <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(!identical(oldrow,newrow)) {return(x)}
})
identical(oldrow,newrow)
test <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(!identical(oldrow,newrow)) {return(x)}
})
View(test)
test <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(!identical(oldrow,newrow)) {return(x)}
}) |>
unlist()
if(identical(oldrow,newrow)) {return(x)}
test <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(identical(oldrow,newrow)) {return(x)}
}) |>
unlist()
if(!identical(oldrow,newrow)) {return(x)}
rows_to_update <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(!identical(oldrow,newrow)) {return(x)}
}) |>
unlist()
length(rows_to_update)
new[new$Nascar_Driver_ID==i,"Nascar_Driver_ID"]
new[new$Nascar_Driver_ID==4392,"Nascar_Driver_ID"]
driver_id <- new[new$Nascar_Driver_ID==i,"Nascar_Driver_ID"]
test <- new[new$Nascar_Driver_ID==4392,"Nascar_Driver_ID"]
driver_id <- new$Nascar_Driver_ID[new$Nascar_Driver_ID==i,]
test <- new$Nascar_Driver_ID[new$Nascar_Driver_ID==i,]
test <- new$Nascar_Driver_ID[new$Nascar_Driver_ID==3897,]
test <- new$Nascar_Driver_ID[new$Nascar_Driver_ID==3897]
nas_images_update <- function() {
# Check if an update is needed
url = "https://cf.nascar.com/cacher/drivers.json"
new <- try(jsonlite::read_json(path = url))[[3]] |>
data.table::rbindlist() |>
dplyr::select(
Nascar_Driver_ID,
Badge_Image,
Image_Small,
Firesuit_Image_Small
) |>
dplyr::distinct()
old <- readr::read_csv("./data/misc/nas_driver_images.csv") |>
dplyr::distinct()
old[is.na(old)]<-""
rows_to_update <- lapply(new$Nascar_Driver_ID,function(x) {
oldrow = unlist(old[old$Nascar_Driver_ID==x,])
newrow = unlist(new[new$Nascar_Driver_ID==x,])
if(!identical(oldrow,newrow)) {return(x)}
}) |>
unlist()
if(length(rows_to_update)==0) {
stop("All images are up to date")
}
# Initialize Directory Locations
badge_dir = paste0("./data/images/badge")
firesuit_dir = "./data/images/firesuit_small"
image_dir = paste0("./data/images/image_small")
#
for(i in rows_to_update) {
driver_id <- new$Nascar_Driver_ID[new$Nascar_Driver_ID==i]
badge = new$Badge_Image[new$Nascar_Driver_ID==i]
image_small = new$Image_Small[new$Nascar_Driver_ID==i]
firesuit_small = new$Firesuit_Image_Small[new$Nascar_Driver_ID==i]
if(badge!="") {
download.file(badge,paste0(badge_dir,"/",driver_id,".png"), mode = 'wb')
}
if(image_small!="") {
download.file(image_small,paste0(image_dir,"/",driver_id,".png"), mode = 'wb')
}
if(firesuit_small!="") {
download.file(firesuit_small,paste0(firesuit_dir,"/",driver_id,".png"), mode = 'wb')
}
}
readr::write_csv(x=new,"./data/misc/nas_driver_images.csv")
message("Driver Images Updated")
}
devtools::check_man()
usethis::use_data_raw()
usethis::use_data_raw("./data-raw/nas_images_initialize.R")
load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
test()
devtools::test()
devtools::test()
devtools::check()
for(year in 2015:2022) {
for(series in c(1,2,3)) {
tmp <- nas_pits(series=series,year=year)
if(length(tmp)==0) {next}
races <- unlist(lapply(1:length(tmp), function(x) unique(tmp[x]$race_id)))
base = paste0("./data/pits/series_",series,"/")
if(!dir.exists(base)) {
dir.create(base,recursive = TRUE)
}
readr::write_csv(x = tmp[r],file = paste0(base,"/",year,".csv"))
}
}
for(year in 2015:2022) {
for(series in c(1,2,3)) {
tmp <- nas_pits(series=series,year=year)
if(length(tmp)==0) {next}
races <- unlist(lapply(1:length(tmp), function(x) unique(tmp[x]$race_id)))
base = paste0("./data/pits/series_",series,"/")
if(!dir.exists(base)) {
dir.create(base,recursive = TRUE)
}
for(r in races) {
readr::write_csv(x = tmp[r],file = paste0(base,"/",year,".csv"))
}
}
}
# Get Race Id's for given year + series
url <- paste0("./data/race_list/series_",series,"/race_list_",year,".csv")
#' @export
nas_pits <- function(year=2022,series=1) {
# Get Race Id's for given year + series
url <- paste0("./data/race_list/series_",series,"/race_list_",year,".csv")
race_list <- try(readr::read_csv(url,show_col_types = F),silent = T)
if(class(race_list)[1]=="try-error") {
stop("Invalid Arguments or No data available for the given series/year")
}
races <- race_list$race_id[race_list$race_type_id==1]
if (length(races)==0) {
stop("No lap time data found for the specified year")
}
#
masterpits <- data.frame()
counter <- 1
no_data = c(); l=1;
for(r in races) {
url = paste0("https://cf.nascar.com/cacher/live/series_",series,"/",r,"/live-pit-data.json")
suppressWarnings({
pits <- try(jsonlite::read_json(path = url),silent=T)
})
if(class(pits)=="try-error") {
no_data[l] <- r; l = l+1
next
}
pits <- do.call(rbind, lapply(pits, data.frame))
pits$id <- NULL
pits$race_id <- r
masterpits <- rbind(masterpits,pits)
#write_csv(x = pits,file = paste0("./files/pits/series_",series,"/",year,"/",r,".csv"))
}
if(length(no_data)>1) {
message(paste0("No pit stop data found for races: ", paste0(no_data,collapse=", ")))
}
return(masterpits)
}
nas_pits(year=2020,series=1)
test <- nas_pits(year=2020,series=1)
for(year in 2015:2022) {
for(series in c(1,2,3)) {
pit_data <- nas_pits(series=series,year=year)
if(length(pit_data)==0) {next}
races <- unlist(lapply(1:length(pit_data), function(x) unique(pit_data[x]$race_id)))
base = paste0("./data/pits/series_",series,"/")
if(!dir.exists(base)) {
dir.create(base,recursive = TRUE)
}
for(r in 1:length(races)) {
readr::write_csv(x = pit_data,file = paste0(base,"/",year,".csv"))
}
}
}
for(year in 2017:2022) {
for(series in c(1,2,3)) {
pit_data <- nas_pits(series=series,year=year)
if(length(pit_data)==0) {next}
races <- unlist(lapply(1:length(pit_data), function(x) unique(pit_data[x]$race_id)))
base = paste0("./data/pits/series_",series,"/")
if(!dir.exists(base)) {
dir.create(base,recursive = TRUE)
}
readr::write_csv(x = pit_data,file = paste0(base,"/",year,".csv"))
}
}
usethis::use_package("data.table")
usethis::use_package("rvest")
usethis::use_package("tidyr")
usethis::use_package("xml2")
?do.call
#' @export
nas_race_list <- function(year=2022, series=1) {
for(yr in year) {
url <- paste0("https://cf.nascar.com/cacher/",yr,"/race_list_basic.json")
schedule_feed <- try(jsonlite::read_json(url),silent=TRUE)
if(class(schedule_feed)[1]=="try-error") {
stop(paste0("Invalid Arguments or No data available for the given year: ", yr))
}
srs <- paste0("series_",series)
for(s in srs) {
if(is.null(schedule_feed[[s]])) {next}
data <- schedule_feed[[s]]
races <- length(data)
for(r in 1:races) {
tmpdata <- data[[r]]
tmpdata[c("schedule","infractions")] <- NULL
data[[r]] <- tmpdata
}
data <- data.table::rbindlist(data)
data <- data |> dplyr::distinct()
}
}
return(data)
}
