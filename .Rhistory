readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid)
rid=5009
# Read in specified races
race_ids <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid)
# Read in specified races
race_ids <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
select(race_id, series_id, race_season)
# Read in specified races
race_ids <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season)
View(race_ids)
# Read in specified races
race_ids <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
race_ids
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
rm(list=ls())
rid=5009
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
races <- race_ids$race_id
rid=10
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
length(race_info)
rid=5009
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id == rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
readr::read_csv("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/2022_5240_lap_times.csv")
base_url = "https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/YEAR_RACE_lap_times.csv")
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_id[3]}_{rid}_lap_times.csv")
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_iinfo[3]}_{rid}_lap_times.csv")
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
url
data <- try(read_csv(url))
data <- try(readr::read_csv(url))
data <- try(readr::read_csv(url, show_col_types = FALSE))
View(data)
rid=c(5009, 5010)
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% rid) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
race_info
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
r=rid
r=rid[1]
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",races[x]))
return(races[x])
}
})
#! @export
nas_lap_times <- function(rid) {
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return(NULL)
}
return(lap_times)
})
return(lap_time_list)
}
lap_time_list
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return(NULL)
}
return(lap_times)
})
#! @export
nas_lap_times <- function(rid) {
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return(NULL)
}
return(lap_times)
})
return(lap_time_list)
}
nas_lap_times(1)
nas_lap_times(2)
nas_lap_times(500)
nas_lap_times(5000)
nas_lap_times(c(5000,1))
#! @export
nas_lap_times <- function(rid) {
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return(NULL)
}
return(lap_times)
})
return(lap_time_list)
}
#! @export
nas_lap_times <- function(rid) {
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return()
}
return(lap_times)
})
return(lap_time_list)
}
nas_lap_times(c(5000,1))
nas_lap_times(c(5000))
#! @export
nas_lap_times <- function(rid) {
lap_time_list <- lapply(rid, function(r) {
# Read in specified races
race_info <-
readr::read_csv("./data/misc/xwalk_race_ids.csv",show_col_types = FALSE) |>
dplyr::filter(race_id %in% r) |>
dplyr::select(race_id, series_id, race_season) |>
unlist()
if (length(race_info)==0) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/lap_times/{race_info[3]}_{rid}_lap_times.csv")
lap_times <- try(
readr::read_csv(url, show_col_types = FALSE))
if(inherits(data,"try-error")) {
message(paste0("No data for race: ",r))
return()
}
closeAllConnections()
return(lap_times)
})
return(lap_time_list)
}
nas_lap_times(c(5000,1))
nas_lap_times(c(5000))
#! @export
nas_live_points <- function(year) {
if (year < 2019 | year > 2023) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/live_points/{year}_live_points.csv")
live_points <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ",r))
return()
}
closeAllConnections()
return(live_points)
}
?closeAllConnections
#! @export
nas_live_points <- function(year) {
if (year < 2019 | year > 2023) {
stop("No lap time data found for the specified race_id")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/live_points/{year}_live_points.csv")
live_points <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ",r))
return()
}
return(live_points)
}
#! @export
nas_race_cautions <- function(year) {
if (year < 2018 | year > 2023) {
stop("No lap time data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_info/{year}_race_info.csv")
race_info <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_info)
}
nas_race_cautions(2018)
nas_race_cautions(2019)
nas_race_cautions(2023)
#! @export
nas_race_leaders <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_leaders/{year}_race_leaders.csv")
race_info <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_leaders)
}
nas_race_leaders(2017)
nas_race_leaders(2018)
#! @export
nas_race_leaders <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_leaders/{year}_race_leaders.csv")
race_leaders <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_leaders)
}
nas_race_leaders(2018)
#! @export
nas_race_infractions <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_infractions/{year}_race_infractions.csv")
race_infractions <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_infractions)
}
nas_race_infractions(2022)
#! @export
nas_pit_stops <- function(year) {
if (year < 2020 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_pit_stops/{year}_race_pit_stops.csv")
pit_stops <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(pit_stops)
}
#! @export
nas_race_results <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_stage_results/{year}_race_stage_results.csv")
race_results <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_results)
}
nas_race_results(2019)
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_stage_results/{year}_race_stage_results.csv")
#! @export
nas_race_results <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_stage_results/{year}_race_stage_results.csv")
race_results <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_results)
}
nas_race_results(2019)
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_stage_results/{year}_race_stage_results.csv")
#! @export
nas_race_results <- function(year) {
if (year < 2018 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/race_stage_results/{year}_race_stage_results.csv")
race_results <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(race_results)
}
nas_race_results(2019)
nas_race_results(2020)
#! @export
nas_weekend <- function(year) {
if (year < 2015 | year > 2023) {
stop("No data found for the specified year")
}
url = glue::glue("https://raw.githubusercontent.com/armstjc/nascar-data-repository/main/nascar_api/weekend_runs/{year}_weekend_runs.csv")
weekend <- try(readr::read_csv(url, show_col_types = FALSE),silent = T)
if(inherits(data,"try-error")) {
message(paste0("No data for season: ", year))
return()
}
return(weekend)
}
nas_weekend(2016)
library(usethis)
load_all()
library(devtools)
load_all()
load_all()
rm(list=ls())
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
race_info <- readr::read_csv("./data/xwalk_race_ids.csv",show_col_types = FALSE)
usethis::use_data(race_info)
usethis::use_data(race_info, internal = TRUE)
usethis::use_data(race_info, internal = TRUE)
xwalk_race_ids <- race_info
usethis::use_data(xwalk_race_ids)
usethis::use_data(xwalk_race_ids, overwrite = T)
usethis::use_data(xwalk_race_ids, overwrite = T, internal = T)
load_all()
check()
document()
use_mit_license()
document()
?nas_lap_times
load_all()
check()
load_all()
document()
load_all()
check()
load_all()
document()
load_all()
check()
use_test("nas_pit_stops")
expect_equal(nas_pit_stops(2022), 4)
expect_equal(class(nas_pit_stops(2022)), numeric)
expect_equal(class(nas_pit_stops(2022)), "data.frame")
expect_equal(any(class(nas_pit_stops(2022))), "data.frame")
expect_equal(any(class(nas_pit_stops(2022))=="data.frame"), "data.frame")
expect_equal(any(class(nas_pit_stops(2022))=="data.frame"), TRUE)
nas_pit_stops(2018)
test <- nas_pit_stops(2018)
test <- try(nas_pit_stops(2018))
use_test("nas_race_results")
use_test("nas_live_points")
use_test("nas_race_cautions)
use_test("nas_race_cautions")
use_test("nas_race_info")
use_test("nas_race_infractions")
use_test("nas_race_leaders")
use_test("nas_race_results")
use_test("nas_race_stage_results")
use_test("nas_race_schedule")
use_test("nas_weekend")
year()
format(Sys.Date(), "%Y")
year < '2024'
1949:2024
1949:"2024"
library(devtools)
check()
pkgbuild::check_build_tools(debug = TRUE)
check()
# Program:  Main.R
# Author:   Ben Gramza
# Description:
#
#
#
#
# Updates:
#   (Date Modified - Description)
# # # # # # #
install_github("jerygetipad/custeR")
# Create String Concatenation Operator
`%||%` <- paste0
# Define Base Library
lib_base <- "C:/Users/bengr/Documents/Programming Projects/DK_NASCAR_MODEL_v0/NASCAR 2023/"
# Read in Header
source(lib_base %||% "/script/Header.R")
library(tidyverse)
library(custeR)
## Initialize Odds
schedule <- custeR::load_nas_schedule(2024)
View(schedule)
weekend <- custeR::load_nas_weekend(2024)
View(weekend)
format(Sys.Date(), "%Y")
build()
library(devtools)
check()
install_github("https://github.com/jerygetipad/custeR")
library(custeR)
load_rr_race_results(2024,1)
